snippet pa package
	package 
snippet cl class
	class ${1}
snippet sac sealed abstract class
	sealed abstract class ${1} {
	  ${2}
	}
snippet ccl case class
	case class ${1}(${2})
snippet ex extends
	extends 
snippet wi with
	with 
snippet tws @throws
	@throws(classOf[${1}])
snippet tr trait
	trait ${1}
snippet str sealed trait
	sealed trait ${1}
snippet vd
	${1:name}: ${2:Type}
snippet main
	def main(args: Array[String]) {
	  ${1}
	}
snippet ir import
	import ${1}
snippet im implicit
	implicit 
snippet iy implicitly[A]
	implicitly[${1}]${2}
snippet c> case a => f
	case ${1} => ${2}
snippet for
	for (${1:x} <- ${2:xs}) ${3}
snippet For
	for {
	  ${1} <- ${2}
	}
snippet <-
	${1} <- ${2}
snippet yl yield
	yield
snippet m+
	⊕ 
snippet m-
	⊖ 
snippet mx
	×
snippet m*
	⊗
snippet m/
	⊘
snippet m.
	⊙
snippet mrn
	⊚
snippet o+
	⊕
snippet o- mplus
	⊖
snippet o*
	⊗
snippet o/
	⊘
snippet o.
	⊙
snippet orn
	⊚
snippet +-
	±
snippet cmp
	∘
snippet star
	⋆
snippet lmb lambda
	λ 
snippet ob object
	object ${1}
snippet cob case object
	case object ${1}
snippet se sealed
	sealed 
snippet ab abstract
	abstract 
snippet pr private
	private 
snippet ov override
	override 
snippet pe protected
	protected 
snippet pu
	public 
snippet pt private[X]
	private[${1:this}] ${2}
snippet fi final
	final 
snippet ma match
	match {
	  ${1}
	}
snippet sy synchronized
	synchronized {
	  ${1}
	}
snippet bl block
	{
	  ${1}
	}
snippet ct constructor
	def this(${1}) = this(${2})
snippet defn
	def ${1:f}(${2:x}: ${3:Int}) ${3}
snippet foldl
	(${1} /: ${2}) { ${3} }
snippet foldr
	(${1} \: ${2}) { ${3} }
snippet f1
	${1:x} => ${2}
snippet f2
	(${1:x}, ${2:y}) => ${3}
snippet ty
	type ${1}
snippet ta
	type ${1} = ${2}
snippet te
	${1}[${2}] forSome { ${3} }
snippet zero
	∅
snippet mz
	∅[${1:A}]
snippet sbt SBT DefaultProject
	import sbt._
	
	class ${1:MyProject}(info: ProjectInfo) extends DefaultProject(info) {
	  ${2}
	}
snippet sbt SBT ParentProject
	import sbt._
	
	class ${1:MyProject}(info: ProjectInfo) extends ParentProject(info) {
	  ${2}
	}
snippet sbt SBT PluginDefinition
	import sbt._
	
	class ${1:Plugins}(info: ProjectInfo) extends PluginDefinition(info) {
	  ${2}
	}
snippet in
	∈
snippet cntns
	∋
snippet fa
	∀
snippet exst
	∃
snippet nexst
	∄
snippet infty
	∞
snippet sum
	∑
snippet prod
	∏
snippet copr
	∐
snippet sqrt
	√
snippet top
	⊤
snippet bot
	⊥
snippet mdl
	⊧
snippet circ
	∘
snippet ccirc
	∘∘
snippet tl Type Lambda
	({type λ[${1:α}]=${2:M}[${3:A}, ${4:α}]})#λ
snippet alpha
	α
snippet scalaz
	import scalaz._, Scalaz._
snippet =>
	⇒
